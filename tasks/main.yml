- become: no
  local_action:
    module: stat
    path: demo.key
  register: ssh_private_key

- assert:
    that:
      - ssh_private_key.stat.exists
    msg: 'Private key file `demo.key` must exist! Generate key pair with `ssh-keygen -t rsa -b 4096 -C "demo@dev.null" -f demo.key -N ""`'

- become: no
  local_action:
    module: stat
    path: demo.key.pub
  register: ssh_public_key

- assert:
    that:
      - ssh_public_key.stat.exists
    msg: 'Public key file `demo.key.pub` must exist! Generate key pair with `ssh-keygen -t rsa -b 4096 -C "demo@dev.null" -f demo.key -N ""`'

- set_fact:
    gitlab_api_url: '{{ ansible_default_ipv4.address }}/{{ gitlab_api_root }}'
    gitlab_api_private_token: '{{ 9999999999999999 | random | to_uuid }}'

- name: install dependencies
  package:
    name: '{{ item }}'
    state: present
  with_items:
    - curl
    - policycoreutils-python

- name: install gitlab gpg key
  rpm_key:
    state: present
    key: '{{ gitlab_gpg_key }}'
  register: gitlab_import_key

- name: install gitlab repo
  get_url:
    url: '{{ gitlab_repo_url }}'
    dest: /etc/yum.repos.d/gitlab-ce.repo
    owner: root
    group: root
    mode: 0644

- name: make yum cache
  command: "yum -q makecache -y --disablerepo='*' --enablerepo='{{ item }}'"
  with_items:
    - gitlab_gitlab-ce
    - gitlab_gitlab-ce-source
  when: gitlab_import_key.changed

- name: install gitlab
  package:
    name: 'gitlab-ce-{{ gitlab_version }}'
    state: present
    update_cache: yes
  register: gitlab_install

- name: initiate configuration
  command: gitlab-ctl reconfigure
  when:
    - gitlab_install is defined
    - gitlab_install.changed

- name: configure gitlab
  template:
    src: gitlab.rb.j2
    dest: /etc/gitlab/gitlab.rb
    owner: root
    group: root
    mode: 0600
  notify:
    - reconfigure gitlab
    - restart gitlab

# FIXME: https://gitlab.com/gitlab-org/gitlab-ce/issues/27954
- name: generate api token
  command: 'gitlab-rails runner -e production "{{ generate_api_token_command }}"'
  vars:
    generate_api_token_command: "PersonalAccessToken.new(user: User.where(id: 1).first, name: 'ansible_api', token: '{{ gitlab_api_private_token }}', scopes: ['api','read_user', 'sudo'], expires_at: Time.now + 1.day) do |t| t.save!; end"

- include_tasks: users.yml

- include_tasks: ssh_keys.yml
  when: gitlab_api_private_token is defined

- include_tasks: projects.yml
  when: gitlab_api_private_token is defined

- name: revoke api token
  command: 'gitlab-rails runner -e production "{{ revoke_api_token_command }}"'
  vars:
    revoke_api_token_command: "PersonalAccessToken.where(user: User.where(id: 1).first, name: 'ansible_api').map {|t| t.revoked = true; t.save! }"
